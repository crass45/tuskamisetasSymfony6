{# templates/web/partials/_filters_panel.html.twig #}
{# Este fichero contiene la lógica del panel de filtros lateral. #}

{% set initially_open_filters = ['Genero', 'Detalles', 'Color'] %}

{% import _self as macros %}

{# La macro no cambia, sigue recibiendo una lista de items #}
{% macro filterCheckboxGroup(title, accordion_key, key, items, filtros_activos, is_open = false) %}
    <div class="filter-group">
        <h3 class="filter-group__title">
            <button class="filter-group__toggle {% if not is_open %}collapsed{% endif %}" type="button" data-toggle="collapse" data-target="#filter-{{ accordion_key|slug }}">
                {{ title|upper }} <i class="fa fa-plus pull-right"></i>
            </button>
        </h3>
        <div id="filter-{{ accordion_key|slug }}" class="panel-collapse collapse {% if is_open %}in{% endif %}" >
            <fieldset class="filter-group__body">
                <legend class="sr-only">{{ title }}</legend>
                {% for item in items %}
                    {% set itemId = item.id %}
                    {% set itemName = item.valor is defined ? item.valor : item.nombre %}
                    <div class="filter-group__option">
                        <label for="filter-item-{{ itemId }}" style="cursor: pointer; font-weight: normal; width: 100%; margin: 0;">
                            <input type="checkbox"
                                   class="checkboxtkm filter-control"
                                   data-filter-group="{{ key }}"
                                   data-filter-value="{{ itemId }}"
                                   id="filter-item-{{ itemId }}"
                                   {% if itemId in filtros_activos %}checked{% endif %}>
                            <span style="padding-left: 5px;">{{ itemName | capitalize }}</span>
                        </label>
                    </div>
                {% endfor %}
            </fieldset>
        </div>
    </div>
{% endmacro %}

<aside class="left-sidebar no-print">
    <p class="tituloMenu">{% trans %}Filtros{% endtrans %}</p>

    {# 1. MARCAS O FAMILIAS DE LA MARCA #}
    {% if is_brand_page is defined and is_brand_page and families is not empty %}
        {# Si estamos en la página de una marca, mostramos sus familias como una lista de enlaces con la apariencia de un filtro #}
        <div class="filter-group">
            <h3 class="filter-group__title">
                <button class="filter-group__toggle" type="button" data-toggle="collapse" data-target="#filter-families">
                    FAMILIAS: <i class="fa fa-plus pull-right"></i>
                </button>
            </h3>
            <div id="filter-families" class="panel-collapse collapse in">
                <div class="filter-group__body">
                    {% for family in families %}
                        <div class="filter-group__option">
                            {# Se usa un enlace 'a' en lugar de un 'label' con 'input' #}
                            <a href="{{ path('app_catalog_resolver', {'_locale': app.request.locale, 'slug': family.nombreUrl}) }}" style="display: block; width: 100%; text-decoration: none; color: inherit; padding: 3px 0; {% if context is defined and attribute(context, 'id') is defined and context.id == family.id %}font-weight: bold;{% endif %}">
                                <span style="padding-left: 5px;">{{ family.nombre | capitalize }}</span>
                            </a>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    {% elseif filtrosDisponibles.fabricantes is defined and filtrosDisponibles.fabricantes is not empty %}
        {# Si no, mostramos el filtro de marcas normal #}
        {% set is_marcas_open = filtros.fabricante is not null %}
        {% set sorted_fabricantes = filtrosDisponibles.fabricantes|sort((a, b) => a.nombre <=> b.nombre) %}
        {{ macros.filterCheckboxGroup('MARCAS'|trans, 'fabricante','fabricante', sorted_fabricantes, filtros.fabricante ? [filtros.fabricante.id] : [], is_marcas_open) }}
    {% endif %}

    {# 2. GÉNERO #}
    {% if filtrosDisponibles.atributos['Genero'] is defined %}
        {% set genero_item_ids = filtrosDisponibles.atributos['Genero']|map(item => item.id) %}
        {% set active_genero_filters = genero_item_ids|filter(id => id in filtros.atributos) %}
        {% set is_genero_open = active_genero_filters|length > 0 or ('Genero' in initially_open_filters) %}
        {# Se ordena el array de atributos de género por la propiedad 'valor' #}
        {% set sorted_genero = filtrosDisponibles.atributos['Genero']|sort((a, b) => a.valor <=> b.valor) %}
        {{ macros.filterCheckboxGroup('GÉNERO'|trans, 'genero','atributos', sorted_genero, filtros.atributos, is_genero_open) }}
    {% endif %}

    {# 3. FILTRO DE COLOR (se mantiene como estaba, ya viene ordenado desde el repositorio) #}
    {% if filtrosDisponibles.colores is defined and filtrosDisponibles.colores is not empty %}
        {% set is_color_open = filtros.colores is not empty or ('Color' in initially_open_filters) %}
        <div class="filter-group">
            <h3 class="filter-group__title"><button class="filter-group__toggle {% if not is_color_open %}collapsed{% endif %}" type="button" data-toggle="collapse" data-target="#filter-color-accordion">{{ 'Color'|trans|upper }} <i class="fa fa-plus pull-right"></i></button></h3>
            <div id="filter-color-accordion" class="panel-collapse collapse {% if is_color_open %}in{% endif %}">
                <div class="filter-group__body filter-group__body--colors">
                    {% for color in filtrosDisponibles.colores %}
                        <div class="cuadro-color filter-control {% if color.rgbUnificado in filtros.colores %}checked{% endif %}"
                             data-filter-group="colores"
                             data-filter-value="{{ color.rgbUnificado }}"
                             style="background-color: {{ color.rgbUnificado }};"
                             title="{{ color.nombre|upper }}"></div>
                    {% endfor %}
                </div>
            </div>
        </div>
    {% endif %}

    {# 4. RESTO DE ATRIBUTOS #}
    {% if filtrosDisponibles.atributos is defined %}
        {% for key, values in filtrosDisponibles.atributos %}
            {% if key not in ['Genero', 'Color', 'Categoría de peso', 'Productos Sostenibles'] %}
                {% set attribute_item_ids = values|map(item => item.id) %}
                {% set active_attribute_filters = attribute_item_ids|filter(id => id in filtros.atributos) %}
                {% set is_attribute_open = active_attribute_filters|length > 0 or (key in initially_open_filters) %}
                {# Se ordena el array de atributos para este grupo por la propiedad 'valor' #}
                {% set sorted_values = values|sort((a, b) => a.valor <=> b.valor) %}
                {{ macros.filterCheckboxGroup(key, key,'atributos', sorted_values, filtros.atributos, is_attribute_open) }}
            {% endif %}
        {% endfor %}
    {% endif %}
</aside>


{# EL SCRIPT JAVASCRIPT SE MANTIENE EXACTAMENTE IGUAL #}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        function updateUrlAndReload(target) {
            const currentUrl = new URL(window.location.href);
            const filterGroup = target.dataset.filterGroup;
            const filterValue = target.dataset.filterValue;

            if (filterGroup.endsWith('s')) {
                const paramName = filterGroup + '[]';
                let values = currentUrl.searchParams.getAll(paramName);
                const isActive = target.type === 'checkbox' ? target.checked : !target.classList.contains('checked');

                if (isActive) {
                    if (!values.includes(filterValue)) { values.push(filterValue); }
                } else {
                    values = values.filter(v => v !== filterValue);
                }

                currentUrl.searchParams.delete(paramName);
                if (values.length > 0) {
                    values.forEach(v => currentUrl.searchParams.append(paramName, v));
                }
            } else {
                const paramName = filterGroup;
                if (target.checked) {
                    currentUrl.searchParams.set(paramName, filterValue);
                } else {
                    currentUrl.searchParams.delete(paramName);
                }
            }

            currentUrl.searchParams.delete('page');
            window.location.href = currentUrl.toString();
        }

        document.querySelectorAll('.filter-control').forEach(element => {
            const eventType = element.tagName === 'INPUT' ? 'change' : 'click';
            element.addEventListener(eventType, function() {
                updateUrlAndReload(this);
            });
        });
    });
</script>

