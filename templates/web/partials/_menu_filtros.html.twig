{# templates/web/partials/_filters_panel.html.twig #}
{# Este fichero contiene la lógica del panel de filtros lateral. #}

{% import _self as macros %}

{# Macro para los grupos de checkboxes (Atributos, Marcas, etc.) #}
{% macro filterCheckboxGroup(title, key, items, filtros_activos) %}
    <div class="filter-group">
        <h3 class="filter-group__title">
            <button class="filter-group__toggle" type="button" data-toggle="collapse" data-target="#filter-{{ key|slug }}">
                {{ title|upper }} <i class="fa fa-plus pull-right"></i>
            </button>
        </h3>
        <div id="filter-{{ key|slug }}" class="panel-collapse collapse in">
            <fieldset class="filter-group__body">
                <legend class="sr-only">{{ title }}</legend>
                {% for item in items %}
                    {% set itemId = item.id %}
                    {% set itemName = item.valor is defined ? item.valor : item.nombre %}
                    <div class="filter-group__option">
                        <input type="checkbox"
                               class="checkboxtkm filter-control"
                               data-filter-group="{{ key }}"
                               data-filter-value="{{ itemId }}"
                               {% if itemId in filtros_activos %}checked{% endif %}>
                        <label>{{ itemName | capitalize }}</label>
                    </div>
                {% endfor %}
            </fieldset>
        </div>
    </div>
{% endmacro %}

<aside class="left-sidebar no-print">
    <p class="tituloMenu">{% trans %}Filtros{% endtrans %}</p>

    {# 1. MARCAS #}
    {% if filtrosDisponibles.fabricantes is defined and filtrosDisponibles.fabricantes is not empty %}
        {{ macros.filterCheckboxGroup('MARCAS'|trans, 'fabricante', filtrosDisponibles.fabricantes, filtros.fabricante ? [filtros.fabricante.id] : []) }}
    {% endif %}

    {# 2. GÉNERO #}
    {% if filtrosDisponibles.atributos['Genero'] is defined %}
        {{ macros.filterCheckboxGroup('GÉNERO'|trans, 'atributos', filtrosDisponibles.atributos['Genero'], filtros.atributos) }}
    {% endif %}

    {# 3. FILTRO DE COLOR #}
    {% if filtrosDisponibles.colores is defined and filtrosDisponibles.colores is not empty %}
        <div class="filter-group">
            <h3 class="filter-group__title"><button class="filter-group__toggle" type="button" data-toggle="collapse" data-target="#filter-color-accordion">{{ 'Color'|trans|upper }} <i class="fa fa-plus pull-right"></i></button></h3>
            <div id="filter-color-accordion" class="panel-collapse collapse in">
                <div class="filter-group__body filter-group__body--colors">
                    {% for color in filtrosDisponibles.colores %}
                        <div class="cuadro-color filter-control {% if color.rgbUnificado in filtros.colores %}checked{% endif %}"
                             data-filter-group="colores"
                             data-filter-value="{{ color.rgbUnificado }}"
                             style="background-color: {{ color.rgbUnificado }};"
                             title="{{ color.nombre|upper }}"></div>
                    {% endfor %}
                </div>
            </div>
        </div>
    {% endif %}

    {# 4. RESTO DE ATRIBUTOS #}
    {% if filtrosDisponibles.atributos is defined %}
        {% for key, values in filtrosDisponibles.atributos %}
            {% if key != 'Genero' %}
                {{ macros.filterCheckboxGroup(key, 'atributos', values, filtros.atributos) }}
            {% endif %}
        {% endfor %}
    {% endif %}
</aside>


{# =================================================================== #}
{# EL "MOTOR" DE LOS FILTROS - SCRIPT ACTUALIZADO #}
{# =================================================================== #}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        function updateUrlAndReload(target) {
            const currentUrl = new URL(window.location.href);
            const filterGroup = target.dataset.filterGroup;
            const filterValue = target.dataset.filterValue;

            // Lógica para filtros multi-selección (arrays en la URL, como colores o atributos)
            if (filterGroup.endsWith('s')) { // Asumimos que los plurales son multi-selección
                const paramName = filterGroup + '[]';
                let values = currentUrl.searchParams.getAll(paramName);
                const isActive = target.type === 'checkbox' ? target.checked : !target.classList.contains('checked');

                if (isActive) {
                    if (!values.includes(filterValue)) { values.push(filterValue); }
                } else {
                    values = values.filter(v => v !== filterValue);
                }

                currentUrl.searchParams.delete(paramName);
                if (values.length > 0) {
                    values.forEach(v => currentUrl.searchParams.append(paramName, v));
                }
            } else { // Lógica para filtros de selección ÚNICA (como fabricante)
                const paramName = filterGroup;
                const currentVal = currentUrl.searchParams.get(paramName);

                // Si hacemos clic en un checkbox que ya está marcado, lo quitamos. Si no, lo establecemos.
                if (target.checked) {
                    currentUrl.searchParams.set(paramName, filterValue);
                } else {
                    currentUrl.searchParams.delete(paramName);
                }
            }

            currentUrl.searchParams.delete('page');
            window.location.href = currentUrl.toString();
        }

        // --- INICIO DE LA CORRECCIÓN ---
        // Se cambia el selector de '.filter-checkbox' a '.filter-control' para que coincida con el HTML
        document.querySelectorAll('.filter-control').forEach(element => {
            // --- FIN DE LA CORRECCIÓN ---
            const eventType = element.tagName === 'INPUT' ? 'change' : 'click';
            element.addEventListener(eventType, function() {
                updateUrlAndReload(this);
            });
        });
    });
</script>