{# templates/web/product/partials/_product_page_javascript.html.twig #}
{# Contiene TODO el JavaScript específico para la ficha de producto #}
<script>
    // 1. Definimos las rutas que nuestro script necesita, aquí mismo.
    var TUSKAM_ROUTES = {
        // NOTA: El ParamConverter no funciona en addCustomizationAction, por eso pasamos el ID.
        add_customization: "{{ path('app_product_add_customization', { '_locale': app.request.locale, 'id': modelo.id, 'nPersonalizaciones': 'N_PERS' }) }}",
        get_sizes: "{{ path('app_product_get_sizes', { '_locale': app.request.locale, 'modeloId': modelo.id, 'colorId': 'SLUG_COLOR' }) }}",
        update_price: "{{ path('app_product_update_price', {'_locale': app.request.locale}) }}",
        // Ruta para el plugin de subida de ficheros. Necesitarás un controlador para esto.
        file_upload: "{{ oneup_uploader_endpoint('gallery') }}",
         presupuesto_rapido_modal: "{{ path('app_product_presupuesto_rapido_modal', {'id': modelo.id}) }}"
    };

    // 2. Envolvemos toda nuestra lógica en un listener para asegurar que la página está lista.
    document.addEventListener('DOMContentLoaded', function () {
        (function ($) { // Usamos una clausura de jQuery para seguridad y compatibilidad

            // 1. Mantenemos la función para obtener el Client ID en un lugar accesible
            function getGoogleAnalyticsClientId() {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    let cookie = cookies[i].trim();
                    if (cookie.startsWith('_ga=')) {
                        const value = cookie.substring(4);
                        const parts = value.split('.');
                        if (parts.length >= 4) {
                            return parts[2] + '.' + parts[3];
                        }
                    }
                }
                return null;
            }

            // --- CÓDIGO DE SEGUIMIENTO (TRACKING) ---
            // Lo ejecutamos dentro de un timeout para asegurar que cualquier otro script de tracking se haya cargado.
            setTimeout(function () {
                // Google Analytics Event
                if (typeof gtag === 'function') {
                    gtag("event", "view_item", {
                        currency: "EUR",
                        value: {{ modelo.getPrecioUnidad(app.user) | number_format(2, '.', ',') }},
                        items: [{
                            item_id: "{{ modelo.getReferencia() }}",
                            item_name: "{{ modelo.getNombre() }}",
                            item_brand: "{{ modelo.getFabricante().getNombre() }}",
                            {% for categoriaObj in modelo.category %}
                            {% if categoriaObj is defined and categoriaObj is not null and categoriaObj.parent is defined %}
                            {% if categoriaObj.parent is not null and categoriaObj.parent.name != "Home" %}
                            {% if categoriaObj.parent.parent is not null and categoriaObj.parent.parent.name != "Home" %}
                            {% if categoriaObj.parent.parent.parent is not null and categoriaObj.parent.parent.parent.name != "Home" %}
                            item_category: "{{ categoriaObj.parent.parent.parent.name }}",
                            item_list_id: "{{ categoriaObj.parent.parent.parent.name }}",
                            item_list_name: "{{ categoriaObj.parent.parent.parent.name }}",

                            {% endif %}
                            item_category: "{{ categoriaObj.parent.parent.name }}",
                            item_list_id: "{{ categoriaObj.parent.parent.name }}",
                            item_list_name: "{{ categoriaObj.parent.parent.name }}",
                            {% endif %}
                            item_category: "{{ categoriaObj.parent.name }}",
                            item_list_id: "{{ categoriaObj.parent.name }}",
                            item_list_name: "{{ categoriaObj.parent.name }}",
                            {% endif %}
                            item_category: "{{ categoriaObj.name }}",
                            item_list_id: "{{ categoriaObj.name }}",
                            item_list_name: "{{ categoriaObj.name }}",
                            {% endif %}

                            {% endfor %}
                        }]
                    });
                }
                // Facebook Pixel Event
                if (typeof fbq === 'function') {
                    fbq('track', 'ViewContent', {
                        content_ids: "['{{ modelo.referencia }}']",
                        content_type: 'product'
                    });
                }
            }, 1500);


            // --- FUNCIÓN DE UTILIDAD: DEBOUNCE ---
            // Evita que una función se ejecute demasiadas veces seguidas (ej. al teclear).
            function debounce(callback, wait) {
                let timeout;
                return function (...args) {
                    const context = this;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => callback.apply(context, args), wait);
                };
            }

            // --- LÓGICA DE CÁLCULO DE PRECIOS ---
            const calculatePrice = debounce(function () {
                const data = {
                    productos: [],
                    trabajos: [],
                    doblado: $('#doblembol').is(':checked')
                };

                // Recoger las cantidades de cada talla
                $('#tallas input[type=number]').each(function () {
                    const quantity = parseInt($(this).val(), 10) || 0;
                    if (quantity > 0) {
                        data.productos.push({
                            referencia: $(this).data('ref'),
                            cantidad: quantity
                        });
                    }
                });

                $('#estampacionLugar .personalization-row').each(function () {
                    const $row = $(this);
                    const selectedOption = $row.find('.personalizacion-selector').val();

                    if (selectedOption === '-1') {
                        console.warn("selected -1")
                        // Se está creando una nueva personalización
                        data.trabajos.push({
                            reutilizado: false,
                            codigo: $row.find('.personalizacionTipo').val(),
                            cantidad: $row.find('.tintas-container').is(':visible') ? ($row.find('.tintas').val() || 1) : 1,
                            ubicacion: $row.find('.ubicacion').val(),
                            observaciones: $row.find('.observaciones').val(),
                            archivo: $row.data('uploaded-file') || ''
                        });
                    } else {
                        // Se está reutilizando una personalización existente
                        data.trabajos.push({
                            reutilizado: true,
                            identificador: selectedOption
                        });
                    }
                });

                // Hacer la llamada AJAX
                $.ajax({
                    url: TUSKAM_ROUTES.update_price,
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function (html) {
                        $('#div_precio').html(html);
                        const precioUnidadText = $(html).find('.precio-unidad-valor').text();
                        $('#circuloPrecioUnidad > div').html(`<p style="font-size: 24px; margin-top: 15px;"><b>${precioUnidadText}</b></p>`);
                    },
                    error: function () {
                        $('#div_precio').html('<p class="alert alert-danger">Error al calcular el precio.</p>');
                    }
                });
            }, 500);

            // --- FUNCIÓN PARA MOSTRAR/OCULTAR PANELES ---
            function checkQuantitiesAndTogglePanels() {
                let totalQuantity = 0;
                $('#tallas input[type=number]').each(function () {
                    totalQuantity += parseInt($(this).val(), 10) || 0;
                });

                if (totalQuantity > 0) {
                    $('#div_serigrafia, #div_precio').slideDown();
                    $('#circuloPrecioUnidad').fadeIn();
                    calculatePrice();
                } else {
                    $('#div_serigrafia, #div_precio').slideUp();
                    $('#circuloPrecioUnidad').fadeOut();
                }
            }

            // --- FUNCIÓN PARA INICIALIZAR EL PLUGIN DE SUBIDA DE FICHEROS ---
            function initializeFileUpload(selector) {
                $(selector).fileupload({
                    url: TUSKAM_ROUTES.file_upload,
                    dataType: 'json',
                    // --- INICIO DE LA CORRECCIÓN ---
                    // La lógica de error ahora está dentro de 'done', porque el servidor responde con 200 OK
                    done: function (e, data) {
                        const container = $(this).closest('.personalization-row');

                        // 1. Comprobamos si la respuesta, aunque exitosa, contiene un error de validación
                        if (data.result && data.result.files && data.result.files.length > 0 && data.result.files[0].error) {
                            const fileWithError = data.result.files[0];
                            let errorMessage = fileWithError.error;

                            switch (errorMessage) {
                                case 'error.maxsize':
                                    errorMessage = 'El fichero es demasiado grande.';
                                    break;
                                case 'error.blacklist':
                                    errorMessage = 'El tipo de fichero no está permitido.';
                                    break;
                            }

                            container.find('.files').html(`<p class="alert alert-danger" style="margin-top: 5px; padding: 5px; font-size: 12px;">${errorMessage}</p>`);
                            return; // Detenemos la ejecución
                        }

                        // 2. Si no hay error, procedemos con la lógica de éxito
                        $.each(data.result.files, function (index, file) {
                            container.find('.files').html($('<p class="file-subido text-success"/>').text(file.name));
                            container.data('uploaded-file', file.name);
                        });
                        calculatePrice();
                    },

                    progressall: function (e, data) {
                        const progress = parseInt(data.loaded / data.total * 100, 10);
                        const container = $(this).closest('.personalization-row');
                        container.find('.progress-bar').css('width', progress + '%');
                    },

                    // Se mejora el manejador de errores 'fail' para que entienda múltiples formatos de respuesta
                    fail: function (e, data) {
                        console.log("ERROR");
                        const container = $(this).closest('.personalization-row');
                        let errorMessage = 'Error al subir el archivo.';

                        // Comprobamos si la respuesta del servidor existe y tiene contenido
                        if (data.jqXHR && data.jqXHR.responseJSON) {
                            const response = data.jqXHR.responseJSON;

                            // Caso 1: El error viene en el formato {files: [{error: "..."}]}
                            if (response.files && Array.isArray(response.files) && response.files.length > 0 && response.files[0].error) {
                                // Mapeamos los códigos de error a mensajes más amigables
                                switch (response.files[0].error) {
                                    case 'error.maxsize':
                                        errorMessage = 'El fichero es demasiado grande.';
                                        break;
                                    case 'error.blacklist':
                                        errorMessage = 'El tipo de fichero no está permitido.';
                                        break;
                                    default:
                                        errorMessage = response.files[0].error;
                                }
                            }
                            // Caso 2: El error viene en el formato {error: "..."}
                            else if (response.error) {
                                errorMessage = response.error;
                            }
                        }

                        // Mostramos el error en la interfaz de usuario
                        container.find('.files').html(`<p class="alert alert-danger" style="margin-top: 5px; padding: 5px; font-size: 12px;">${errorMessage}</p>`);
                    }
                });
            }

            // --- LÓGICA DE PERSONALIZACIÓN ---
            let nPersonalizaciones = 0;
            $('body').on('click', '#addPersonalizacion, .addPersonalizacion', function () {
                nPersonalizaciones++;
                const url = TUSKAM_ROUTES.add_customization.replace('N_PERS', nPersonalizaciones);

                const container = $('#estampacionLugar');
                const loadingDiv = $('<div style="text-align:center;"><img src="{{ asset("images/loading.gif") }}" alt="cargando"></div>');
                container.append(loadingDiv);

                $.ajax({
                    url: url,
                    success: function (html) {

                        // loadingDiv.replaceWith(html);
                        // // IMPORTANTE: Se inicializa el plugin de subida para la nueva fila
                        // initializeFileUpload(`#fileUpload-${nPersonalizaciones}`);
                        // --- INICIO DE LA MEJORA ---
                        // 1. Convertimos el HTML recibido en un objeto jQuery para poder manipularlo
                        const $html = $(html);

                        // 2. Buscamos el select de 'Técnica de Estampado' dentro del nuevo panel
                        const $tecnicaSelect = $html.find('.personalizacionTipo');

                        // 3. Eliminamos la primera opción ("Selecciona una técnica...")
                        $tecnicaSelect.find('option[value=""]').remove();

                        // 4. Seleccionamos la nueva primera opción de la lista
                        $tecnicaSelect.find('option:first').prop('selected', true);

                        // 5. Insertamos el HTML ya modificado en la página
                        loadingDiv.replaceWith($html);
                        // --- FIN DE LA MEJORA ---

                        // 6. El resto de la lógica de inicialización se mantiene igual
                        const newPanel = container.find('.personalization-row').last();
                        initializeFileUpload(newPanel.find('.file-upload-input'));
                        newPanel.find('.personalizacion-selector').trigger('change');


                    }
                });
            });

            // --- LÓGICA PARA LOS ELEMENTOS DINÁMICOS DEL PANEL DE PERSONALIZACIÓN ---
            function updateCustomizationPanel(selectElement) {
                const $row = $(selectElement).closest('.personalization-row');
                const $selectedOption = $(selectElement).find('option:selected');
                const selectedCode = $selectedOption.val();
                const maxColores = $selectedOption.data('max-colores');
                const areas = $selectedOption.data('areas');
                const $tintasContainer = $row.find('.tintas-container');
                const $ubicacionSelect = $row.find('.ubicacion');

                if (maxColores > 1) {
                    $tintasContainer.show();
                } else {
                    $tintasContainer.hide();
                }

                let areasToShow = [];
                if (areas && areas.length > 0) {
                    areasToShow = areas;
                } else {
                    if (selectedCode === 'A1') {
                        areasToShow = ['Pecho', 'Espalda', 'Manga Izquierda', 'Manga Derecha'];
                    } else {
                        areasToShow = ['Delantera', 'Trasera'];
                    }
                }

                // Se construye el HTML de las nuevas opciones
                let optionsHtml = '';
                $.each(areasToShow, function (index, area) {
                    optionsHtml += `<option value="${area}">${area}</option>`;
                });

                // Se crea el nuevo <select> completo como una cadena de texto
                const newSelectHtml = `<select id="${$ubicacionSelect.attr('id')}" class="form-control ubicacion">${optionsHtml}</select>`;

                // Se reemplaza el select antiguo por el nuevo. Esto es más robusto que .html().
                $ubicacionSelect.replaceWith(newSelectHtml);
            }

            // Lógica para el botón de eliminar personalización
            $('body').on('click', '.remove-personalization-row', function () {
                $(this).closest('.personalization-row').remove();
                calculatePrice(); // Recalculamos el precio
            });

            // --- LÓGICA PARA CARGAR LAS TALLAS POR AJAX ---
            function loadTallas() {
                $(".colorProductoPresupuesto").each(function () {
                    const button = $(this);
                    const colorSlug = button.data('color');
                    const url = TUSKAM_ROUTES.get_sizes.replace('SLUG_COLOR', colorSlug);

                    const divId = `tallas-para-${colorSlug}`;
                    const container = $('#tallas');

                    if (container.find(`#${divId}`).length === 0) {
                        const div = $(`<div id="${divId}" style="text-align:center;"><img src="{{ asset('images/loading.gif') }}" alt="cargando"></div>`);
                        container.append(div);
                        div.load(url, function (response, status, xhr) {
                            if (status == "error") {
                                console.error('Error al cargar las tallas para', colorSlug, ':', xhr.status, xhr.statusText);
                                div.html("<p class='alert alert-danger'>Error al cargar las tallas.</p>");
                            }
                        });
                    }
                });
            }

            // --- NUEVA LÓGICA PARA LOS RADIO BUTTONS ---
            $('body').on('change', '.personalizacionCarritoRadio', function () {
                const $row = $(this).closest('.personalization-row');
                if (this.value === 'Si') {
                    $row.find('.nuevaPersonalizacionContainer').hide();
                    $row.find('.personalizacionDeCarritoContainer').show();
                } else {
                    $row.find('.nuevaPersonalizacionContainer').show();
                    $row.find('.personalizacionDeCarritoContainer').hide();
                }
                calculatePrice(); // Se recalcula el precio al cambiar de opción
            });

            // Lógica para mostrar/ocultar el campo de tintas
            function toggleTintasVisibility(selectElement) {
                const selectedOptionValue = $(selectElement).val();
                const $tintasContainer = $(selectElement).closest('.nuevaPersonalizacionContainer').find('.tintas-container');
                if (selectedOptionValue === 'A1') { // Asumimos que 'A1' es el código de Serigrafía
                    $tintasContainer.show();
                } else {
                    $tintasContainer.hide();
                }
            }

            $('body').on('change', '.personalizacionTipo', function () {
                toggleTintasVisibility(this);
                calculatePrice();
            });


            // --- NUEVA LÓGICA PARA EL DESPLEGABLE UNIFICADO ---
            $('body').on('change', '.personalizacion-selector', function () {
                const $row = $(this).closest('.personalization-row');
                if ($(this).val() === '-1') {
                    $row.find('.nuevaPersonalizacionContainer').slideDown();
                    // Se inicializa el panel de nueva personalización
                    $row.find('.personalizacionTipo').trigger('change');
                } else {
                    $row.find('.nuevaPersonalizacionContainer').slideUp();
                }
                calculatePrice();
            });

            // --- LISTENERS DE EVENTOS ---
            checkQuantitiesAndTogglePanels(); // Comprobación inicial al cargar la página
            $(window).on('load', loadTallas);

            $('body').on('change keyup', '#tallas input[type=number]', checkQuantitiesAndTogglePanels);
            $('body').on('change', '#estampacionLugar select, #doblembol', calculatePrice);
            $('body').on('keyup', '#estampacionLugar input, #estampacionLugar textarea', calculatePrice);
            $('body').on('change', '.personalizacionTipo', function () {
                updateCustomizationPanel(this);
                calculatePrice();
            });

            // Galería de imágenes (si existe la vista simple)
            // const mainImage = $('#imagen-producto-main');
            // if (mainImage.length) {
            //     const originalImageSrc = mainImage.data('imagen-original');
            //     $('.colorProducto a').on('mouseover', function () {
            //         const newImageSrc = $(this).children().data('imagen-grande');
            //         if (newImageSrc) {
            //             mainImage.attr('src', newImageSrc);
            //         }
            //     }).on('mouseout', function () {
            //         mainImage.attr('src', originalImageSrc);
            //     });
            // }


            // ====================================================================
            // --- INICIO DE LA CORRECCIÓN: LÓGICA DEL MODAL DE GALERÍA RESTAURADA ---
            // ====================================================================
            $('#fotos-detalle-modal').on('show.bs.modal', function (event) {
                // 1. Obtener el botón (el 'div' del color) que abrió el modal
                var button = $(event.relatedTarget);

                // 2. Leer el string de imágenes del atributo data-imagenes
                var imageString = button.data('imagenes');
                var modal = $(this);

                var mainImageView = modal.find('#gallery-main-image');
                var thumbnailsContainer = modal.find('.gallery-thumbnails');
                var prevButton = modal.find('#gallery-prev');
                var nextButton = modal.find('#gallery-next');

                // Limpiar contenido previo para evitar que se mezclen galerías
                thumbnailsContainer.html('');
                mainImageView.attr('src', '');

                var imageArray = [];
                var currentIndex = 0;

                // Función interna para mostrar una imagen específica
                function showImageByIndex(index) {
                    if (!imageArray[index]) return;
                    mainImageView.attr('src', imageArray[index]);
                    thumbnailsContainer.find('.gallery-thumbnail').removeClass('active');
                    $(thumbnailsContainer.find('.gallery-thumbnail')[index]).addClass('active');
                    currentIndex = index;
                }

                // 3. Procesar el string de URLs y construir la galería
                if (imageString) {
                    // Convertimos el string "url1,url2,url3" en un array
                    imageArray = imageString.split(",").filter(Boolean);
                    var thumbnailsHtml = "";

                    if (imageArray.length > 0) {
                        imageArray.forEach(function (imageUrl, index) {
                            // Creamos una miniatura por cada URL
                            thumbnailsHtml += `<img src="${imageUrl}" class="gallery-thumbnail" data-index="${index}" alt="Miniatura ${index + 1}">`;
                        });
                        thumbnailsContainer.html(thumbnailsHtml);
                        showImageByIndex(0); // Mostramos la primera imagen por defecto
                    }
                }

                // 4. Asignar eventos a los botones de navegación (con .off() para evitar duplicados)
                nextButton.off('click').on('click', function() {
                    var nextIndex = (currentIndex + 1) % imageArray.length;
                    showImageByIndex(nextIndex);
                });

                prevButton.off('click').on('click', function() {
                    var prevIndex = (currentIndex - 1 + imageArray.length) % imageArray.length;
                    showImageByIndex(prevIndex);
                });

                thumbnailsContainer.off('click', '.gallery-thumbnail').on('click', '.gallery-thumbnail', function() {
                    showImageByIndex($(this).data('index'));
                });
            });
            // ==================================================================
            // --- FIN DE LA CORRECCIÓN: LÓGICA DEL MODAL DE GALERÍA RESTAURADA ---
            // ==================================================================


            // --- FUNCIONALIDADES AÑADIDAS DESDE TU PROYECTO ANTERIOR ---

            // 2. Efecto Hover para cambiar la imagen principal
            const mainImage = $('#imagen-producto-main');
            if (mainImage.length) {
                const originalImageSrc = mainImage.attr('src');
                // Usamos 'body' para delegar el evento, ya que los selectores de color se cargan dinámicamente
                $('body').on('mouseover', '.color-swatch-wrapper', function() {
                    const newImageSrc = $(this).find('[data-imagen-grande]').data('imagen-grande');
                    if (newImageSrc) { mainImage.attr('src', newImageSrc); }
                }).on('mouseout', '.color-swatch-wrapper', function() {
                    mainImage.attr('src', originalImageSrc);
                });
            }

            // 3. Scroll suave al hacer clic en un color para ver sus tallas
            $('body').on('click', '.color-swatch-wrapper', function() {
                const colorId = $(this).data('color');
                const tallasContainer = $(`#tallas-para-${colorId}`);
                if (tallasContainer.length) {
                    $('html, body').animate({
                        scrollTop: tallasContainer.offset().top - 150 // -150 para dejar un margen superior
                    }, 800);
                }
            });

            // 4. Carga del contenido del modal "Presupuesto Rápido"
            // 2. Modificamos el listener del modal "Presupuesto Rápido"
            $("#presupuestoRapidoModal").on("show.bs.modal", function (e) {
                const modal = $(this);
                const loadingDiv = $('<div class="modal-dialog"><div class="modal-content" style="text-align:center;"><img src="{{ asset('images/loading.gif') }}" style="width:100px; margin: 40px;" alt="cargando"></div></div>');
                modal.html(loadingDiv);

                $.ajax({
                    url: TUSKAM_ROUTES.presupuesto_rapido_modal,
                    success: function (result) {
                        // Primero, cargamos el HTML del formulario en el modal
                        modal.html(result);

                        // AHORA que el formulario existe, vinculamos el script de GA
                        const contactForm = modal.find('#solicitud-contacto-form')[0]; // Usamos find() y obtenemos el elemento DOM
                        if (contactForm) {
                            contactForm.addEventListener('submit', function() {
                                const clientId = getGoogleAnalyticsClientId();
                                if (clientId) {
                                    // Eliminamos campos previos para evitar duplicados
                                    let existingField = this.querySelector('input[name="googleClientId"]');
                                    if(existingField) {
                                        existingField.remove();
                                    }

                                    // Creamos y añadimos el campo oculto
                                    const hiddenInput = document.createElement('input');
                                    hiddenInput.type = 'hidden';
                                    hiddenInput.name = 'googleClientId';
                                    hiddenInput.value = clientId;
                                    this.appendChild(hiddenInput);
                                }
                            });
                        }
                    },
                    error: function() {
                        modal.find('.modal-content').html('<div class="modal-body"><p class="alert alert-danger">Error al cargar.</p></div>');
                    }
                });
            });

            // 5. Scroll suave para el botón "Ver Resumen"
            $(".scrollResumen").on("click", function () {
                const scrollTo = $("#div_precio");
                if (scrollTo.length) {
                    $('html, body').animate({
                        scrollTop: scrollTo.offset().top - 100
                    }, 1000);
                }
            });

            // 6. Lógica del círculo de precio flotante
            $(window).on('scroll', function () {
                const priceDiv = $('#div_precio');
                if (priceDiv.length && priceDiv.is(':visible')) {
                    if ($(this).scrollTop() >= priceDiv.position().top - priceDiv.height()) {
                        $('#circuloPrecioUnidad').fadeOut();
                    } else {
                        $('#circuloPrecioUnidad').fadeIn();
                    }
                }
            });
        })(jQuery);
    });
</script>

